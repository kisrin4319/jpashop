다양한 연관관계 매핑

다중성
* 다대일: @ManyToOne -- 가장 많이 사용

* 일대다: @OneToMany

* 일대일: @OneToOne

* 다대다 : @ManyToMany -- 실무에서 사용하면 안되는 것?

단방향, 양방향
* 테이블
   * 외래 키 하나로 양쪽 조인 가능
   * 사실 방향이라는 개념이 없다..

* 객체
   * 참조용 필드가 있는 쪽으로만 참조 가능
   * 한쪽만 참조하면 단방향
   * 양쪽이 서로 참조하면 양방향 (이해하기 쉽게 만든 용어 / 객체 입장에서 보면 방향이 하나다) -> 사실은 단방향이 2개가 있는 것


 다대일 [N : 1]
 -> 가장 많이 사용하는 연관 관계
 -> 다대일의 반대는 일대다

 다대일 양방향 정리
 -> 외래 키가 있는 쪽이 연관관계의 주인
 -> 양쪽을 서로 참조하도록 개발


 일대다 [1 : N]
 -> 표준 스펙에서는 지원 하지만 실무에서는 해당 모델은 선호 하지 않는다고 한다.

 EX) Team -> Members // 해당 팀에 속해 있는 Member 리스트를 조회하고 싶다는 니즈


// Builder Pattern ?

일대다 단방향 정리
  * 일대다 단방향은 일대다(1:N)에서 일(1)이 연관관계의 주인
  * 테이블 일대다 관계는 항상 다(N) 쪽에 외래 키가 있음
  * 객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조
  * @JoinColumn을 꼭 사용해야 함. 그렇지 않으면 조인 테이블 방식을 사용함(중간에 테이블을 하나 추가함) -> 실무에서는 종종 사용되는 관리 방법 아닌가?

일대다 단방향 매핑의 단점
   * 엔티티가 관리하는 외래 키가 다른 테이블에 있음
   * 연관관계 관리를 위해 추가로 UPDATE SQL 실행
  일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하자

 일대다 양방향 ?
 ->> 이런 매핑은 공식적으로 존재 x
 그래도 하겠다면 @JoinColumn(insertable = false, updatable = false)
 읽기 전용 필드를 사용해서 양방향 처럼 사용하는 방법
 다대일 양방향을 사용하자




 일대일 [1 : 1]
 반대의 관계로 일대일
 * 주 테이블이나 대상 테이블 중에 외래 키 선택 가능
   * 주 테이블에 외래 키
   * 대상 테이블에 외래 키
 * 외래 키에 데이터베이스 유니크(UNI) 제약조건 추가
다대일 단방향 매핑과 유사
다대일 양방향 매핑 처럼 외래키가 있는 곳이 연관관계의 주인

주 테이블에 외래 키
 * 주 객체가 대상 객체의 참조를 가지는 것 처럼
   주 테이블에 외래 키를 두고 대상 테이블을 찾음
 * 객체지향 개발자 선호
 * JPA 매핑 편리
 * 장점: 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
 * 단점: 값이 없으면 외래 키에 null 허용
대상 테이블에 외래 키
  * 대상 테이블에 외래 키가 존재
  * 전통적인 데이터베이스 개발자 선호
  * 장점: 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
  * 단점: 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨  ->> 프록시, 지연 로딩 ?



다대다 [N:M]
* 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음
* 연결 테이블을 추가해서 일대다 , 다대일 관계로 풀어내야함

객체는 컬렉션을 사용해서 객체 2개로 다대다 관계 가능
