연관관계의 주인과 mappedBy
* mappedBy = JPA의 멘탈붕괴 난이도
* mappedBy는 처음에는 이해하기 어렵다.
* 객체와 테이블간에 연관관계를 맺는 차이를 이해해야 한다.
차이 :
 객체 연관관계 = 2개
 * 회원 -> 팀 연관관계 1개(단방향)
 * 팀 -> 회원 연관관계 1개 (단방향)

 테이블 연관관계 = 1개
 * 회원 <-> 팀의 연관 관계 1개 (양방향)


 객체의 양방향 관계
 * 객체의 양방향 관계는 사실 양방향 관계가 아니라 서로 다른 단방향 관계 2개다.

 객체를 양방향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다.

 A -> B (a.getB)

 테이블의 양방향 연관관계
 *테이블은 외래 키 하나로 두 테이블의 연관 관계를 관리한다.
 member.team_id 외래 키 하나로 양방향 연관관계 가짐 (양쪽으로 조인할 수 있다.)


 연관관계의 주인(OWNER)
 양방향 매핑 규칙
 * 객체의 두 관계중 하나를 연관관계의 주인으로 지정
 * 연관 관계의 주인만이 외래 키를 관리(등록,수정)
 * 주인이 아닌쪽은 읽기만 가능
 * 주인은 mappedBy 속성 사용X
 * 주인이 아니면 mappedBy 속성으로 주인 지정


 누구를 주인으로?
 외래 키가 있는 곳을 주인으로 정해라


 양방향 매핑 시 연관관계의 주인에 값을 입력해야 한다.
 (순수한 객체 관계를 고려하면 항상 양쪽 다 값을 입력해야 한다.)

 양방향 연관관계 주의 - 실습

* 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정하자.
* 연관 관계 편의 메소드를 생성하자
* 양방향 매핑시에 무한 루프를 조심하자 ex) toString(), lombok , JSON 생성 라이브러리

양방향 매핑 정리
* 단방향 매핑만으로도 이미 연관 관계 매핑은 완료
* 양방향 매핑은 반대 방향으로 조회(객체 그래프 탐색) 기능이 추가된 것 뿐
* JPQL에서 역방향으로 탐색할 일이 많음
* 단방향 매핑을 잘 하고 양방향은 필요 할 때 추가해도 됨 (테이블에 영향을 주지 않음)